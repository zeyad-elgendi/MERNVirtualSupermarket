/**


import './VirtualScreen.css';

import React from "react";
import { Canvas } from "react-three-fiber";
import { Physics, usePlane, useBox }  from '@react-three/cannon';
//import "./styles.css";
import Controls from "../components/Controls";

function Plane(props) {
  const [ref] = usePlane(() => ({ rotation: [-Math.PI / 2, 0, 0], ...props }));
  return (
    <mesh ref={ref} receiveShadow>
      <planeBufferGeometry attach="geometry" args={[1009, 1000]} />
      <shadowMaterial attach="material" color="#171717" />
    </mesh>
  );
}

function Cube(props) {
  const [ref] = useBox(() => ({
    mass: 1,
    position: [0, 5, 0],
    rotation: [0.4, 0.2, 0.5],
    ...props
  }));
  const color = props.color ? props.color : "hotpink";
  return (
    <mesh receiveShadow castShadow ref={ref}>
      <boxBufferGeometry />
      <meshLambertMaterial attach="material" color={color} />
    </mesh>
  );
}

function App() {
  return (
    <Canvas
      shadowMap
      sRGB
      gl={{ alpha: false }}
      camera={{ position: [-1, 1, 5], fov: 50 }}
    >
      <color attach="background" args={["lightblue"]} />
      <Physics>
        <Controls />
        <hemisphereLight intensity={0.35} />
        <spotLight
          position={[10, 10, 10]}
          angle={0.3}
          penumbra={1}
          intensity={2}
          castShadow
        />
        <Plane />
        <Cube />
        <Cube position={[0, 10, -2]} color="rebeccapurple" />
        <Cube position={[0, 20, -2]} color="darkseagreen" />
      </Physics>
    </Canvas>
  );
}

export default App;

/*
import {Canvas, useFrame,useThree, extend } from 'react-three-fiber';
import {useRef} from 'react';
import { OrbitControls } from "three/examples/jsm/controls/OrbitControls";
extend({ OrbitControls });

const CameraControls = () => {
  // Get a reference to the Three.js Camera, and the canvas html element.
  // We need these to setup the OrbitControls component.
  // https://threejs.org/docs/#examples/en/controls/OrbitControls
  const {
    camera,
    gl: { domElement },
  } = useThree();
  // Ref to the controls, so that we can update them on every frame using useFrame
  const controls = useRef();
  useFrame((state) => controls.current.update());
  return <orbitControls ref={controls} args={[camera, domElement]} />;
};

const Box = (props)=>{
  const ref = useRef();

  useFrame(state=>{
    ref.current.rotation.x += 0.01;
    ref.current.rotation.y -= 0.01;
  })
  return(
  <mesh ref ={ref} {...props}>
  <boxBufferGeometry/>
  <meshBasicMaterial color = '#d90f5d'/>
  </mesh>
  )
}
function VirtualScreen() {


  return (
    <div class='virtualscreen' >
   <Canvas 
   camera ={{position:[3,3,3]}}
   >
     < CameraControls />
   <Box position= {[-1,1,2]}/>
   
   <axesHelper args={[2 ]}/>
   </Canvas>
   </div>
  );
}

export default VirtualScreen;
*/
 */